name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: PHP ${{ matrix.php }} - Symfony ${{ matrix.symfony }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2', '8.3', '8.4']
        symfony: ['6.4.*', '7.0.*', '7.1.*', '7.2.*']
        exclude:
          # Exclude combinations that don't make sense
          - php: '8.2'
            symfony: '7.2.*'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer require --no-update symfony/framework-bundle:${{ matrix.symfony }}
          composer require --no-update symfony/config:${{ matrix.symfony }}
          composer require --no-update symfony/dependency-injection:${{ matrix.symfony }}
          composer require --no-update symfony/http-kernel:${{ matrix.symfony }}
          composer require --no-update symfony/messenger:${{ matrix.symfony }}
          composer require --no-update symfony/uid:${{ matrix.symfony }}
          composer install --prefer-dist --no-progress --no-interaction

      - name: Install tools
        run: make tools

      - name: Validate composer.json
        run: composer validate --strict

      - name: Run PHPStan
        run: make phpstan

      - name: Run tests
        run: make tests

      - name: Run dependency analysis
        run: make dependency-analysis

  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, dom, filter, json
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install tools
        run: make tools

      - name: Check code style
        run: make cs-check || (echo "Code style issues found. Run 'make cs' to fix them." && exit 1)

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, xdebug
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install tools
        run: make tools

      - name: Generate coverage report
        run: make clover

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.clover
          fail_ci_if_error: false